//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
	package paqueton;
	import java.io.*;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short MASI=259;
public final static short MENOSI=260;
public final static short ASIGN=261;
public final static short DIST=262;
public final static short GOTO=263;
public final static short UP=264;
public final static short DOWN=265;
public final static short TRIPLE=266;
public final static short FOR=267;
public final static short ULONGINT=268;
public final static short DOUBLE=269;
public final static short IF=270;
public final static short THEN=271;
public final static short ELSE=272;
public final static short BEGIN=273;
public final static short END=274;
public final static short END_IF=275;
public final static short OUTF=276;
public final static short TYPEDEF=277;
public final static short FUN=278;
public final static short RET=279;
public final static short CADMUL=280;
public final static short TAG=281;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    1,    1,    2,    2,    3,    3,    3,    3,    4,    4,
    4,    4,    4,    4,    4,   13,   13,   13,   13,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   17,   17,
    9,    9,    9,    9,    9,    9,    9,    9,    9,   16,
   16,   16,   16,   16,   16,   18,   18,   19,   19,   20,
   20,   20,    5,   22,   22,   21,   23,   23,    7,    7,
    7,    7,   15,   15,   15,   24,   24,   24,   25,   25,
   25,   25,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,   26,   29,   27,   28,   28,   28,
   28,   30,   30,   30,   30,   30,    8,    8,   31,   31,
   10,   10,   10,   10,   10,   10,   32,   32,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   33,   33,   12,   12,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    2,    2,    2,    2,    2,
    2,    1,    1,    1,    2,    2,    1,    1,    2,    2,
    2,    2,    2,    2,    1,    3,    2,    2,    1,    3,
    7,    2,    2,    1,    6,    6,    6,    5,    3,    1,
    5,    7,    4,    4,    3,    6,    5,    5,    4,    1,
    1,    1,    1,    1,    1,    3,    1,    2,    1,    1,
    4,    3,    2,    3,    1,    1,    1,    1,    3,    2,
    2,    1,    3,    3,    1,    3,    3,    1,    1,    1,
    2,    1,    9,    8,    8,    8,    8,    8,    8,    8,
    7,    7,    7,    6,    2,    0,    2,    2,    2,    1,
    1,    5,    4,    4,    4,    4,    4,    3,    2,    1,
    4,    3,    3,    2,    3,    1,    1,    1,   12,   11,
   11,   10,   11,   11,   11,    9,   11,   11,   11,    8,
    7,    9,    7,   11,    1,    1,    2,    1,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,   80,   50,   51,    0,   52,    0,
    0,   68,   67,    0,    0,    9,    0,    0,   25,    0,
   53,   54,   55,    0,    0,   12,   13,   14,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   78,    8,    0,    0,    0,   82,
    0,   79,  137,    0,    0,    0,    0,    5,    0,  118,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   81,    3,   11,   15,   16,   19,   20,   21,   22,   23,
   24,    0,   27,    0,    0,    0,    0,    0,   65,    0,
    0,    0,    0,    2,  108,    0,    0,   66,    0,    0,
   62,    0,    0,    0,    0,    0,    0,    1,  115,    0,
  112,    0,    0,    0,    0,   26,    0,    0,    0,   57,
    0,    0,    0,    0,    0,    0,    0,    0,   76,   77,
    0,  107,   61,    0,    0,    0,    0,    0,    0,    0,
  111,    0,    0,    0,    0,    0,    0,    0,   59,    0,
   43,    0,   64,    0,    0,    0,    0,    0,    0,    0,
    0,  135,  136,    0,    0,    0,   41,    0,   95,    0,
    0,   38,    0,    0,    0,   56,   58,   47,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   46,    0,    0,   36,   35,   37,    0,    0,
    0,    0,   94,    0,  101,    0,  100,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  131,  133,    0,   42,
    0,    0,   31,    0,   93,    0,    0,    0,    0,    0,
   91,   99,   98,   92,    0,    0,    0,    0,    0,    0,
  130,    0,    0,    0,    0,   84,    0,   87,   90,   88,
    0,    0,   86,    0,    0,    0,   89,   85,    0,    0,
  132,    0,    0,    0,    0,    0,  126,    0,   83,    0,
  103,  105,    0,  104,    0,  122,    0,    0,    0,    0,
    0,    0,    0,    0,  102,  120,  124,  127,  128,    0,
  121,  129,  125,  123,  134,  119,
};
final static short yydgoto[] = {                          3,
   25,  205,   27,   28,   29,   30,   31,   32,   33,   34,
   35,   36,   37,   38,   39,   40,   70,  121,  150,   41,
   42,   90,   43,   44,   45,  143,  251,  206,  252,  207,
   99,   63,  164,
};
final static short yysindex[] = {                      -234,
   76,  606,    0,  -18,    0,    0,    0,   58,    0, -266,
  -40,    0,    0, 1312,  635,    0,  -36, -224,    0, 1287,
    0,    0,    0, -214,  846,    0,    0,    0,   34,   69,
   75,   83,   96,   99,  100,  105, -182,   56,   64,   58,
 -151, -138, -155,   38,    0,    0,  872,   98, -112,    0,
   61,    0,    0, -104,  -54, 1374, -106,    0,  897,    0,
  -29,   61,  129,  136,   17,   90,  444,  139,   64,   14,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1083,    0,   58,   58,   58,   61,   58,    0,  138,
  -26,   58,   58,    0,    0,   61,   58,    0,  142,   66,
    0,   52,  -74, -194,  -68, 1380, 1083,    0,    0,  150,
    0, -192,  -66,   61,  154,    0,   39,   58, 1226,    0,
  997,   38,   38,   61,   61,  -62,  -15, -192,    0,    0,
   61,    0,    0,  137,  141,  -49,  143, -181,  145,  972,
    0,  -60,  160,  146,  115,   58,  166,   61,    0, 1201,
    0,  -67,    0,  -13,  -38,  169, 1312, 1312,  152, 1312,
 1312,    0,    0,  -42,  -39, 1083,    0,  -56,    0,  -53,
 1312,    0,   54,   86,  133,    0,    0,    0,  -16,  -30,
  101,   19,   24,  165,  174, 1274,  215,  222,  262, 1083,
   48,   42,    0,  922,  263,    0,    0,    0,   88,  922,
  126,  153,    0,   33,    0,  178,    0,  205,  922, -181,
 -181,    8, 1083,  269, -181, -181,    0,    0,  290,    0,
  431, -181,    0,  456,    0,  481,   67,  506,  140,    9,
    0,    0,    0,    0,  531,  556,   82,   84, 1083,   95,
    0, -183,  107,  116, 1083,    0,  118,    0,    0,    0,
  104,  922,    0,  322,   49,  333,    0,    0, 1022,  358,
    0,  360,  362,  -21,  365,  367,    0,  368,    0,  922,
    0,    0,  359,    0, 1083,    0, 1083, 1083, 1083, 1050,
 1083, 1083, 1083, 1083,    0,    0,    0,    0,    0, 1083,
    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0, 1324,    0,    0,    0,  366,    0,  369,
    0,    0,    0,    0,  417,    0,  371,    0,    0,    0,
    0,    0,    0,    0,  419,    0,    0,    0,   26,   51,
    0,  959,    0,    0,    0,    0,    0,  -25,    0,  -35,
 1386,    0,  167, 1317,    0,    0,  427,    0,    0,    0,
  374,    0,    0,    0,    0,    0,    0,    0,  442,    0,
    0,  -14,  385,    0,  934,    0,    0,  -19,  106,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -24,  -23,  390,    0,    1,
    0,    0,    0,    0,    0,  409,    0,    0,    0,  326,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  394,
    0,    0,    0,  106,    0,    0,    0,    0,    0,    0,
  396, 1346, 1351,  -22,  399,    0,    0,    0,    0,    0,
  420,    0,    0,    0,    0,    0,    0,    0,    0,  401,
    0,    0,    0,    0,    0,    0,    0,  110,    0,    0,
    0,  410,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  411,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  947,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  203,
    0,    0,  581,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
   41,    6,    0, 1681,    0,    0,    0, 1651,    0,    0,
    0,    0,  337,   12, 1698,    3, -116, 1664,    0, 1595,
  -10,    0,   21,   30,   60,  -80,    0,  353,    0,  303,
    0,  421,  -43,
};
final static int YYTABLESIZE=1971;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         55,
   63,  190,  182,   61,  106,   34,   26,   26,   24,  160,
  202,  109,  101,  128,   53,   24,   33,   32,   30,  281,
   26,   48,    1,   34,  154,   17,  117,  179,  173,  174,
   73,   68,   64,   29,   33,   32,   30,   97,    2,   28,
   63,   86,   47,   71,  117,   63,  155,  156,  239,  256,
   18,   84,   73,   85,  117,   59,   48,  118,  199,   63,
   63,   63,   63,  135,   73,   17,  136,   68,   98,  115,
   17,   86,  229,  180,  263,   12,   13,   24,  146,   92,
  162,  163,  162,  163,   93,   17,   17,   17,   82,  273,
   18,   84,   74,   85,  196,   18,   83,  118,   22,   21,
   23,  142,   24,   84,   49,   85,   84,  272,   85,   88,
   18,   18,   18,  122,  123,   20,  142,  142,   89,  147,
   24,  191,   91,   22,   21,   23,  197,   75,  223,  118,
   67,  118,   98,   76,   24,   22,   21,   23,   95,   49,
   20,   77,   24,  142,  100,   24,   40,   98,   98,   40,
   39,  129,  130,   39,   78,  172,  103,   79,   80,   24,
   22,   21,   23,   81,  107,   20,  237,  238,  240,  111,
   24,  243,  244,  198,   98,  112,  133,   24,  247,  116,
  254,  126,  132,  134,   24,   22,   21,   23,   49,  137,
  141,  144,   20,  145,  153,  157,  169,   24,  264,  158,
  170,  161,  104,  165,  171,  175,  105,  178,  159,  183,
  186,  232,   22,   21,   23,  189,   54,   20,  193,  194,
    4,    5,   24,  210,  162,  163,  232,    4,    5,  232,
  127,  232,  211,  232,  181,   34,  280,   22,   21,   23,
  232,  232,  201,   60,   20,   29,   33,   32,   30,   24,
   60,   28,   12,   13,   12,   13,  200,   63,   63,   63,
   63,   63,   63,   63,   22,   21,   23,   63,   63,   63,
   63,  162,  163,  215,   63,  232,   63,  113,   63,   63,
  216,   63,   17,   17,   17,   17,   17,   17,   17,    4,
    5,  208,   17,   17,   17,   17,  209,    6,    7,   17,
    9,   17,  217,   17,   17,  219,   17,   18,   18,   18,
   18,   18,   18,   18,    4,    5,  220,   18,   18,   18,
   18,  222,    6,    7,   18,    9,   18,  242,   18,   18,
  245,   18,    4,    5,    6,    7,    8,    9,   10,  259,
  250,  260,   11,   12,   13,   14,    4,    5,   15,   16,
   57,   17,  262,   18,    4,    5,   19,    4,    5,    6,
    7,    8,    9,   10,  265,   12,   13,   11,   12,   13,
   14,    4,    5,  266,  203,  268,   17,  269,   18,  204,
  271,   19,    4,    5,    6,    7,    8,    9,   10,    4,
    5,  274,   11,   12,   13,   14,    4,    5,  277,  225,
  278,   17,  279,   18,  204,  282,   19,  283,  284,    4,
    5,    6,    7,    8,    9,   10,   10,  285,    6,   11,
   12,   13,   14,   66,   72,  227,    7,  138,   17,  116,
   18,  204,   71,   19,    4,    5,    6,    7,    8,    9,
   10,    4,  139,  114,   11,   12,   13,   14,   70,  110,
   60,  231,  113,   17,   45,   18,  204,   69,   19,   44,
  109,    4,    5,    6,    7,    8,    9,   10,   49,   48,
   20,   11,   12,   13,   14,   24,   97,    0,  234,    0,
   17,  110,   18,  204,    0,   19,    0,    0,    0,    0,
   22,   21,   23,  184,  185,   20,  187,  188,    0,    0,
   24,    0,    0,   22,   21,   23,    0,  195,  233,    0,
    0,    0,    0,    0,    0,   22,   21,   23,    0,    0,
   20,    0,  214,  233,    0,   24,  233,    0,  233,    0,
  233,    0,    0,    0,    0,    0,    0,  233,  233,    0,
   22,   21,   23,    0,    0,   20,  221,    0,    0,    0,
   24,    0,  224,  226,  228,    0,    0,    0,    0,    0,
  235,  236,    0,    0,    0,   22,   21,   23,    0,    0,
   20,    0,  233,    0,    0,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   22,   21,   23,    0,    0,   20,    0,    0,    0,    0,
   24,    0,    0,    0,  270,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   22,   21,   23,    0,    0,
  106,    0,    0,    0,    0,  106,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  106,  106,  106,    0,    0,   20,    0,    0,    0,    0,
   24,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   22,   21,   23,    0,    0,
    0,    0,    0,    0,   20,    0,    0,    0,    0,   24,
    0,    0,    0,    0,    0,    0,    0,    4,    5,    6,
    7,    8,    9,   10,   22,   21,   23,   11,   12,   13,
   14,    0,    6,    7,  246,    9,   17,    0,   18,  204,
    0,   19,    4,    5,    6,    7,    8,    9,   10,    0,
    0,    0,   11,   12,   13,   14,    0,    0,    0,  248,
    0,   17,    0,   18,  204,    0,   19,    4,    5,    6,
    7,    8,    9,   10,    0,    0,    0,   11,   12,   13,
   14,    0,    0,    0,  249,    0,   17,    0,   18,  204,
    0,   19,    4,    5,    6,    7,    8,    9,   10,    0,
    0,    0,   11,   12,   13,   14,    0,    0,    0,  253,
    0,   17,    0,   18,  204,    0,   19,    4,    5,    6,
    7,    8,    9,   10,    0,    0,    0,   11,   12,   13,
   14,    0,    0,    0,  257,    0,   17,    0,   18,  204,
    0,   19,    4,    5,    6,    7,    8,    9,   10,    0,
    0,    0,   11,   12,   13,   14,    0,    0,    0,  258,
    0,   17,    0,   18,  204,    0,   19,  106,  106,  106,
  106,  106,  106,  106,    0,    0,    0,  106,  106,  106,
  106,    0,    0,    0,  106,    0,  106,    0,  106,  106,
    0,  106,    4,    5,    6,    7,    8,    9,   10,    0,
    0,    0,   11,   12,   13,   14,    0,    0,    0,   46,
    0,   17,    0,   18,    0,   20,   19,    0,    0,    0,
   24,    4,    5,    6,    7,    8,    9,   10,    0,    0,
    0,   11,   12,   13,   14,   22,   21,   23,   58,    0,
   17,   20,   18,    0,    0,   19,   24,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   22,   21,   23,    0,    0,   20,    0,    0,    0,
    0,   24,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   22,   21,   23,    0,
    0,   20,    0,    0,    0,    0,   24,    0,    0,    0,
    0,    0,    0,    0,   60,   60,   60,   60,   60,    0,
   60,   22,   21,   23,    0,    0,   96,    0,    0,    0,
    0,   96,    0,   60,   60,   60,    0,    0,    0,    0,
   82,   82,    0,   82,    0,   82,   96,   96,   96,    0,
    0,   20,    0,    0,    0,    0,   24,    0,   82,   82,
   82,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   22,   21,   23,    0,    0,   20,    0,    0,    0,
    0,   24,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   22,   21,   23,    0,
    0,   20,  275,    0,    0,    0,   24,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   22,   21,   23,    0,    0,    0,    0,    0,   20,
  290,    0,    0,    0,   24,    0,    0,    0,    0,    0,
    0,    0,    4,    5,    6,    7,    8,    9,   10,   22,
   21,   23,   11,   12,   13,   14,    0,    0,    0,   72,
    0,   17,   20,   18,    0,    0,   19,   24,    4,    5,
    6,    7,    8,    9,   10,    0,    0,    0,   11,   12,
   13,   14,   22,   21,   23,   94,    0,   17,    0,   18,
    0,    0,   19,    4,    5,    6,    7,    8,    9,   10,
    0,    0,    0,   11,   12,   13,   14,    0,    0,    0,
  108,    0,   17,    0,   18,    0,    0,   19,    4,    5,
    6,    7,    8,    9,   10,    0,    0,    0,   11,   12,
   13,   14,   60,   60,    0,   60,    0,   17,    0,   18,
  204,    0,   19,   96,   96,   96,   96,   96,   96,   96,
    0,    0,    0,   96,   96,   96,   96,   82,   82,    0,
   82,    0,   96,    0,   96,   96,    0,   96,    4,    5,
    6,    7,    8,    9,   10,    0,    0,    0,   11,    0,
   20,   14,    0,  166,  119,   24,  167,   17,    0,    0,
    0,    0,   19,    4,    5,    6,    7,    8,    9,   10,
   22,   21,   23,   11,    0,   20,   14,    0,    0,  119,
   24,  151,   17,    0,    0,    0,    0,   19,    4,    5,
    6,    7,    8,    9,   10,   22,   21,   23,   11,    0,
    0,   14,    0,    0,  119,    0,    0,   17,    0,    0,
    0,    0,   19,    0,    0,    0,    4,    5,    6,    7,
    8,    9,   10,   56,  213,    0,   11,    0,   24,   14,
    0,    0,  119,    0,    0,   17,   66,   67,    0,    0,
   19,   24,  212,   22,   21,   23,    0,    0,    0,    4,
    5,    6,    7,    8,    9,   10,   22,   21,   23,   11,
    0,   56,   14,    0,    0,  119,   24,   75,   17,   75,
   75,   75,    0,   19,   60,   60,   60,   60,   60,    0,
   60,   22,   21,   23,    0,   75,   75,   75,   75,    0,
    0,    0,   60,   60,   60,   60,   73,    0,   73,   73,
   73,   74,    0,   74,   74,   74,    0,    0,    0,    0,
    0,    0,    0,    0,   73,   73,   73,   73,    0,   74,
   74,   74,   74,   66,   67,    0,    0,    0,   24,   56,
    0,    0,    0,    0,   24,    0,    0,   79,   79,    0,
   79,    0,   79,   22,   21,   23,    0,    0,  138,   22,
   21,   23,    0,    0,    0,   79,   79,   79,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    4,    5,    6,
    7,    8,    9,   10,    0,    0,    0,   11,    0,    0,
   14,    0,    0,    0,  176,    0,   17,    0,    0,    0,
    0,   19,    4,    5,    6,    7,    8,    9,   10,    0,
    0,    0,   11,    0,    0,   14,    0,    0,    0,    0,
    0,   17,    0,    0,    0,    0,   19,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    4,    5,    6,    7,    0,    9,    0,    0,    0,    0,
    0,    0,    0,   65,    5,    6,    7,    0,    9,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    4,    5,
    6,    7,    0,    9,    0,   75,   75,    0,   75,    0,
    0,    0,   60,   60,   60,   60,    0,   75,    0,    0,
    0,    0,    0,    0,   60,    0,    0,    0,    0,    0,
    0,    0,   52,    0,   73,   73,    0,   73,   52,   74,
   74,   52,   74,    0,   52,    0,   73,    0,    0,    0,
    0,   74,    0,    0,    0,    0,    0,    0,    0,    0,
    4,    5,    6,    7,   52,    9,    4,    5,    6,    7,
    0,    9,   52,  102,   79,   79,    0,   79,    0,    0,
   52,    0,    0,    0,    0,   52,    0,    0,   50,    0,
   52,    0,    0,    0,   50,    0,    0,   50,    0,    0,
   50,    0,    0,    0,    0,    0,    0,    0,   52,   52,
   52,    0,   52,    0,    0,    0,   52,   52,    0,    0,
   50,   52,    0,    0,    0,    0,    0,    0,   50,    0,
   52,    0,    0,    0,    0,   51,   50,    0,    0,    0,
    0,   50,   52,    0,   62,    0,   50,   69,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   50,   50,   50,   87,   50,   52,
   52,    0,   50,   50,    0,   96,    0,   50,    0,    0,
    0,   52,   52,   69,   52,   52,   50,    0,   62,    0,
    0,    0,  120,  114,    0,   52,    0,    0,   50,   52,
  140,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,    0,    0,  124,  152,  125,    0,  120,    0,    0,
    0,    0,    0,    0,  131,   50,   50,    0,   52,  149,
    0,  120,    0,  168,    0,    0,    0,   50,   50,    0,
   50,   50,    0,    0,    0,  148,    0,    0,    0,    0,
  120,   50,    0,   52,    0,   50,    0,    0,    0,  192,
  177,    0,    0,    0,    0,    0,   50,    0,    0,    0,
    0,    0,  114,  114,    0,    0,  120,    0,    0,    0,
    0,    0,    0,  218,   50,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  120,    0,  114,    0,    0,    0,  241,    0,    0,   50,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  120,    0,    0,    0,    0,    0,    0,
    0,  230,  261,    0,    0,    0,    0,    0,  267,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
    0,    0,  276,    0,    0,  120,  255,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  286,  120,
  287,  288,  289,  291,  292,  293,  294,  295,    0,    0,
    0,    0,    0,  296,    0,  120,    0,  120,  120,  120,
  120,  120,  120,  120,  120,    0,    0,    0,    0,    0,
  120,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         40,
    0,   41,   41,   40,   59,   41,    1,    2,   45,   59,
   41,   41,  125,   40,  281,   45,   41,   41,   41,   41,
   15,   40,  257,   59,   40,    0,   41,   41,  145,  146,
   25,   20,  257,   59,   59,   59,   59,   48,  273,   59,
   40,   39,    2,  258,   59,   45,  127,  128,   41,   41,
    0,   43,   47,   45,   41,   15,   40,   44,  175,   59,
   60,   61,   62,  258,   59,   40,  261,   56,   48,   67,
   45,   69,   40,  154,  258,  268,  269,   45,   40,   42,
  264,  265,  264,  265,   47,   60,   61,   62,  271,   41,
   40,   43,   59,   45,   41,   45,   41,   44,   60,   61,
   62,  112,   45,   43,  123,   45,   43,   59,   45,  261,
   60,   61,   62,   84,   85,   40,  127,  128,  257,  117,
   45,  165,  278,   60,   61,   62,   41,   59,   41,   44,
   41,   44,  112,   59,   45,   60,   61,   62,   41,  123,
   40,   59,   45,  154,  257,   45,   41,  127,  128,   44,
   41,   92,   93,   44,   59,   41,  261,   59,   59,   45,
   60,   61,   62,   59,  271,   40,  210,  211,  212,   41,
   45,  215,  216,   41,  154,   40,  125,   45,  222,   41,
   41,   44,   41,  258,   45,   60,   61,   62,  123,  258,
   41,  258,   40,   40,  257,   59,  257,   45,  242,   59,
   41,   59,  257,   59,   59,   40,  261,  275,  258,   41,
   59,  206,   60,   61,   62,  258,  257,   40,  275,  273,
  257,  258,   45,   59,  264,  265,  221,  257,  258,  224,
  257,  226,   59,  228,  273,  271,  258,   60,   61,   62,
  235,  236,  273,  280,   40,  271,  271,  271,  271,   45,
  280,  271,  268,  269,  268,  269,  273,  257,  258,  259,
  260,  261,  262,  263,   60,   61,   62,  267,  268,  269,
  270,  264,  265,   59,  274,  270,  276,  261,  278,  279,
   59,  281,  257,  258,  259,  260,  261,  262,  263,  257,
  258,  273,  267,  268,  269,  270,  273,  259,  260,  274,
  262,  276,   41,  278,  279,  258,  281,  257,  258,  259,
  260,  261,  262,  263,  257,  258,  275,  267,  268,  269,
  270,   59,  259,  260,  274,  262,  276,   59,  278,  279,
   41,  281,  257,  258,  259,  260,  261,  262,  263,  258,
  274,  258,  267,  268,  269,  270,  257,  258,  273,  274,
   14,  276,  258,  278,  257,  258,  281,  257,  258,  259,
  260,  261,  262,  263,  258,  268,  269,  267,  268,  269,
  270,  257,  258,  258,  274,  258,  276,  274,  278,  279,
   59,  281,  257,  258,  259,  260,  261,  262,  263,  257,
  258,   59,  267,  268,  269,  270,  257,  258,   41,  274,
   41,  276,   41,  278,  279,   41,  281,   41,   41,  257,
  258,  259,  260,  261,  262,  263,    0,   59,    0,  267,
  268,  269,  270,  257,   59,  273,    0,   59,  276,   59,
  278,  279,   59,  281,  257,  258,  259,  260,  261,  262,
  263,    0,  106,   59,  267,  268,  269,  270,   59,   41,
  125,  274,   59,  276,   59,  278,  279,   59,  281,   59,
   41,  257,  258,  259,  260,  261,  262,  263,   59,   59,
   40,  267,  268,  269,  270,   45,  274,   -1,  274,   -1,
  276,   61,  278,  279,   -1,  281,   -1,   -1,   -1,   -1,
   60,   61,   62,  157,  158,   40,  160,  161,   -1,   -1,
   45,   -1,   -1,   60,   61,   62,   -1,  171,  206,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   40,   -1,  186,  221,   -1,   45,  224,   -1,  226,   -1,
  228,   -1,   -1,   -1,   -1,   -1,   -1,  235,  236,   -1,
   60,   61,   62,   -1,   -1,   40,  194,   -1,   -1,   -1,
   45,   -1,  200,  201,  202,   -1,   -1,   -1,   -1,   -1,
  208,  209,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   40,   -1,  270,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   40,   -1,   -1,   -1,   -1,
   45,   -1,   -1,   -1,  252,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   40,   -1,   -1,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   40,   -1,   -1,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   60,   61,   62,  267,  268,  269,
  270,   -1,  259,  260,  274,  262,  276,   -1,  278,  279,
   -1,  281,  257,  258,  259,  260,  261,  262,  263,   -1,
   -1,   -1,  267,  268,  269,  270,   -1,   -1,   -1,  274,
   -1,  276,   -1,  278,  279,   -1,  281,  257,  258,  259,
  260,  261,  262,  263,   -1,   -1,   -1,  267,  268,  269,
  270,   -1,   -1,   -1,  274,   -1,  276,   -1,  278,  279,
   -1,  281,  257,  258,  259,  260,  261,  262,  263,   -1,
   -1,   -1,  267,  268,  269,  270,   -1,   -1,   -1,  274,
   -1,  276,   -1,  278,  279,   -1,  281,  257,  258,  259,
  260,  261,  262,  263,   -1,   -1,   -1,  267,  268,  269,
  270,   -1,   -1,   -1,  274,   -1,  276,   -1,  278,  279,
   -1,  281,  257,  258,  259,  260,  261,  262,  263,   -1,
   -1,   -1,  267,  268,  269,  270,   -1,   -1,   -1,  274,
   -1,  276,   -1,  278,  279,   -1,  281,  257,  258,  259,
  260,  261,  262,  263,   -1,   -1,   -1,  267,  268,  269,
  270,   -1,   -1,   -1,  274,   -1,  276,   -1,  278,  279,
   -1,  281,  257,  258,  259,  260,  261,  262,  263,   -1,
   -1,   -1,  267,  268,  269,  270,   -1,   -1,   -1,  274,
   -1,  276,   -1,  278,   -1,   40,  281,   -1,   -1,   -1,
   45,  257,  258,  259,  260,  261,  262,  263,   -1,   -1,
   -1,  267,  268,  269,  270,   60,   61,   62,  274,   -1,
  276,   40,  278,   -1,   -1,  281,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   40,   -1,   -1,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   40,   -1,   -1,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   42,   43,   44,   45,   -1,
   47,   60,   61,   62,   -1,   -1,   40,   -1,   -1,   -1,
   -1,   45,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   42,   43,   -1,   45,   -1,   47,   60,   61,   62,   -1,
   -1,   40,   -1,   -1,   -1,   -1,   45,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   40,   -1,   -1,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   40,   41,   -1,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   40,
   41,   -1,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,   60,
   61,   62,  267,  268,  269,  270,   -1,   -1,   -1,  274,
   -1,  276,   40,  278,   -1,   -1,  281,   45,  257,  258,
  259,  260,  261,  262,  263,   -1,   -1,   -1,  267,  268,
  269,  270,   60,   61,   62,  274,   -1,  276,   -1,  278,
   -1,   -1,  281,  257,  258,  259,  260,  261,  262,  263,
   -1,   -1,   -1,  267,  268,  269,  270,   -1,   -1,   -1,
  274,   -1,  276,   -1,  278,   -1,   -1,  281,  257,  258,
  259,  260,  261,  262,  263,   -1,   -1,   -1,  267,  268,
  269,  270,  259,  260,   -1,  262,   -1,  276,   -1,  278,
  279,   -1,  281,  257,  258,  259,  260,  261,  262,  263,
   -1,   -1,   -1,  267,  268,  269,  270,  259,  260,   -1,
  262,   -1,  276,   -1,  278,  279,   -1,  281,  257,  258,
  259,  260,  261,  262,  263,   -1,   -1,   -1,  267,   -1,
   40,  270,   -1,  272,  273,   45,  275,  276,   -1,   -1,
   -1,   -1,  281,  257,  258,  259,  260,  261,  262,  263,
   60,   61,   62,  267,   -1,   40,  270,   -1,   -1,  273,
   45,  275,  276,   -1,   -1,   -1,   -1,  281,  257,  258,
  259,  260,  261,  262,  263,   60,   61,   62,  267,   -1,
   -1,  270,   -1,   -1,  273,   -1,   -1,  276,   -1,   -1,
   -1,   -1,  281,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,   40,   41,   -1,  267,   -1,   45,  270,
   -1,   -1,  273,   -1,   -1,  276,   40,   41,   -1,   -1,
  281,   45,   59,   60,   61,   62,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,   60,   61,   62,  267,
   -1,   40,  270,   -1,   -1,  273,   45,   41,  276,   43,
   44,   45,   -1,  281,   41,   42,   43,   44,   45,   -1,
   47,   60,   61,   62,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   59,   60,   61,   62,   41,   -1,   43,   44,
   45,   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,   59,
   60,   61,   62,   40,   41,   -1,   -1,   -1,   45,   40,
   -1,   -1,   -1,   -1,   45,   -1,   -1,   42,   43,   -1,
   45,   -1,   47,   60,   61,   62,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,   -1,   -1,  267,   -1,   -1,
  270,   -1,   -1,   -1,  274,   -1,  276,   -1,   -1,   -1,
   -1,  281,  257,  258,  259,  260,  261,  262,  263,   -1,
   -1,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,   -1,  262,   -1,  259,  260,   -1,  262,   -1,
   -1,   -1,  259,  260,  261,  262,   -1,  271,   -1,   -1,
   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    8,   -1,  259,  260,   -1,  262,   14,  259,
  260,   17,  262,   -1,   20,   -1,  271,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,   40,  262,  257,  258,  259,  260,
   -1,  262,   48,   49,  259,  260,   -1,  262,   -1,   -1,
   56,   -1,   -1,   -1,   -1,   61,   -1,   -1,    8,   -1,
   66,   -1,   -1,   -1,   14,   -1,   -1,   17,   -1,   -1,
   20,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   84,   85,
   86,   -1,   88,   -1,   -1,   -1,   92,   93,   -1,   -1,
   40,   97,   -1,   -1,   -1,   -1,   -1,   -1,   48,   -1,
  106,   -1,   -1,   -1,   -1,    8,   56,   -1,   -1,   -1,
   -1,   61,  118,   -1,   17,   -1,   66,   20,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   84,   85,   86,   40,   88,  145,
  146,   -1,   92,   93,   -1,   48,   -1,   97,   -1,   -1,
   -1,  157,  158,   56,  160,  161,  106,   -1,   61,   -1,
   -1,   -1,   82,   66,   -1,  171,   -1,   -1,  118,  175,
  107,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  186,   -1,   -1,   86,  121,   88,   -1,  107,   -1,   -1,
   -1,   -1,   -1,   -1,   97,  145,  146,   -1,  204,  119,
   -1,  121,   -1,  140,   -1,   -1,   -1,  157,  158,   -1,
  160,  161,   -1,   -1,   -1,  118,   -1,   -1,   -1,   -1,
  140,  171,   -1,  229,   -1,  175,   -1,   -1,   -1,  166,
  150,   -1,   -1,   -1,   -1,   -1,  186,   -1,   -1,   -1,
   -1,   -1,  145,  146,   -1,   -1,  166,   -1,   -1,   -1,
   -1,   -1,   -1,  190,  204,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  190,   -1,  175,   -1,   -1,   -1,  213,   -1,   -1,  229,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  213,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  204,  239,   -1,   -1,   -1,   -1,   -1,  245,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  239,
   -1,   -1,  259,   -1,   -1,  245,  229,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  275,  259,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,   -1,  290,   -1,  275,   -1,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,   -1,   -1,   -1,   -1,
  290,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=281;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","MASI","MENOSI","ASIGN","DIST",
"GOTO","UP","DOWN","TRIPLE","FOR","ULONGINT","DOUBLE","IF","THEN","ELSE",
"BEGIN","END","END_IF","OUTF","TYPEDEF","FUN","RET","CADMUL","TAG",
};
final static String yyrule[] = {
"$accept : prog",
"prog : ID BEGIN cuerpo END",
"prog : BEGIN cuerpo END",
"prog : ID cuerpo END",
"prog : ID BEGIN cuerpo",
"prog : ID BEGIN END",
"prog : ID cuerpo",
"prog : BEGIN cuerpo",
"prog : BEGIN END",
"prog : ID END",
"prog : ID BEGIN",
"cuerpo : cuerpo sentencia",
"cuerpo : sentencia",
"sentencia : sentec_declar",
"sentencia : sentec_eject",
"sentec_declar : declaracion_var ';'",
"sentec_declar : declaracion_fun ';'",
"sentec_declar : declaracion_var",
"sentec_declar : declaracion_fun",
"sentec_eject : asignacion ';'",
"sentec_eject : invoc_fun ';'",
"sentec_eject : seleccion ';'",
"sentec_eject : sald_mensaj ';'",
"sentec_eject : for ';'",
"sentec_eject : goto ';'",
"sentec_eject : TAG",
"condicion : '(' condicion_2 ')'",
"condicion : condicion_2 ')'",
"condicion : '(' condicion_2",
"condicion : condicion_2",
"condicion_2 : expresion comparador expresion",
"condicion_2 : '(' lista_expres ')' comparador '(' lista_expres ')'",
"condicion_2 : comparador expresion",
"condicion_2 : expresion comparador",
"condicion_2 : comparador",
"condicion_2 : '(' lista_expres ')' '(' lista_expres ')'",
"condicion_2 : '(' ')' comparador '(' lista_expres ')'",
"condicion_2 : '(' lista_expres ')' comparador '(' ')'",
"condicion_2 : '(' ')' comparador '(' ')'",
"lista_expres : lista_expres ',' expresion",
"lista_expres : expresion",
"seleccion : IF condicion THEN cuerpo_control END_IF",
"seleccion : IF condicion THEN cuerpo_control ELSE cuerpo_control END_IF",
"seleccion : condicion THEN cuerpo_control END_IF",
"seleccion : IF condicion THEN cuerpo_control",
"seleccion : condicion THEN cuerpo_control",
"seleccion : IF condicion THEN cuerpo_control cuerpo_control END_IF",
"seleccion : condicion THEN cuerpo_control cuerpo_control END_IF",
"seleccion : IF condicion THEN cuerpo_control cuerpo_control",
"seleccion : condicion THEN cuerpo_control cuerpo_control",
"comparador : MASI",
"comparador : MENOSI",
"comparador : DIST",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"cuerpo_control : BEGIN multip_cuerp_fun END",
"cuerpo_control : sentec_eject",
"multip_cuerp_fun : multip_cuerp_fun sentec_eject",
"multip_cuerp_fun : sentec_eject",
"variable : ID",
"variable : ID '{' variable '}'",
"variable : ID '{' '}'",
"declaracion_var : tipo lista_variables",
"lista_variables : lista_variables ',' ID",
"lista_variables : ID",
"tipo : tipo_basico",
"tipo_basico : DOUBLE",
"tipo_basico : ULONGINT",
"asignacion : variable ASIGN expresion",
"asignacion : variable ASIGN",
"asignacion : ASIGN expresion",
"asignacion : ASIGN",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : variable",
"factor : CTE",
"factor : '-' CTE",
"factor : invoc_fun",
"declaracion_fun : tipo_basico FUN ID '(' parametro ')' BEGIN cuerpo_funcion_p END",
"declaracion_fun : FUN ID '(' parametro ')' BEGIN cuerpo_funcion END",
"declaracion_fun : tipo_basico FUN '(' parametro ')' BEGIN cuerpo_funcion END",
"declaracion_fun : tipo_basico FUN ID '(' parametro ')' cuerpo_funcion END",
"declaracion_fun : tipo_basico FUN ID '(' ')' BEGIN cuerpo_funcion END",
"declaracion_fun : tipo_basico FUN ID '(' parametro ')' BEGIN END",
"declaracion_fun : tipo_basico FUN ID parametro ')' BEGIN cuerpo_funcion END",
"declaracion_fun : tipo_basico FUN ID '(' parametro BEGIN cuerpo_funcion END",
"declaracion_fun : tipo_basico FUN ID parametro BEGIN cuerpo_funcion END",
"declaracion_fun : tipo_basico FUN ID parametro ')' BEGIN END",
"declaracion_fun : tipo_basico FUN ID '(' parametro BEGIN END",
"declaracion_fun : tipo_basico FUN ID parametro BEGIN END",
"parametro : tipo ID",
"$$1 :",
"cuerpo_funcion_p : $$1 cuerpo_funcion",
"cuerpo_funcion : cuerpo_funcion retorno",
"cuerpo_funcion : cuerpo_funcion sentencia",
"cuerpo_funcion : retorno",
"cuerpo_funcion : sentencia",
"retorno : RET '(' expresion ')' ';'",
"retorno : RET '(' ')' ';'",
"retorno : RET expresion ')' ';'",
"retorno : RET '(' expresion ';'",
"retorno : RET '(' expresion ')'",
"invoc_fun : ID '(' param_real ')'",
"invoc_fun : ID '(' ')'",
"param_real : tipo expresion",
"param_real : expresion",
"sald_mensaj : OUTF '(' mensaje ')'",
"sald_mensaj : OUTF mensaje ')'",
"sald_mensaj : OUTF '(' mensaje",
"sald_mensaj : OUTF mensaje",
"sald_mensaj : OUTF '(' ')'",
"sald_mensaj : OUTF",
"mensaje : expresion",
"mensaje : CADMUL",
"for : FOR '(' ID ASIGN CTE ';' condicion ';' foravanc CTE ')' cuerpo_control",
"for : FOR ID ASIGN CTE ';' condicion ';' foravanc CTE ')' cuerpo_control",
"for : FOR '(' ID ASIGN CTE ';' condicion ';' foravanc CTE cuerpo_control",
"for : FOR ID ASIGN CTE ';' condicion ';' foravanc CTE cuerpo_control",
"for : FOR '(' ASIGN CTE ';' condicion ';' foravanc CTE ')' cuerpo_control",
"for : FOR '(' ID CTE ';' condicion ';' foravanc CTE ')' cuerpo_control",
"for : FOR '(' ID ASIGN ';' condicion ';' foravanc CTE ')' cuerpo_control",
"for : FOR '(' ';' condicion ';' foravanc CTE ')' cuerpo_control",
"for : FOR '(' ID ASIGN CTE ';' ';' foravanc CTE ')' cuerpo_control",
"for : FOR '(' ID ASIGN CTE ';' condicion ';' CTE ')' cuerpo_control",
"for : FOR '(' ID ASIGN CTE ';' condicion ';' foravanc ')' cuerpo_control",
"for : FOR '(' ID ASIGN CTE ';' ')' cuerpo_control",
"for : FOR '(' ';' ';' foravanc CTE ')'",
"for : FOR '(' ID ASIGN CTE ';' ';' ')' cuerpo_control",
"for : FOR '(' ';' condicion ';' ')' cuerpo_control",
"for : '(' ID ASIGN CTE ';' condicion ';' foravanc CTE ')' cuerpo_control",
"foravanc : UP",
"foravanc : DOWN",
"goto : GOTO TAG",
"goto : GOTO",
};

//#line 238 "gramatica.y"
String nombreArchivo;
AnalizadorLexico lex;
TablaSimbolos ts;
String tipoVar;
int cantRetornos;
String estructuras;
public Parser(String nombreArchivo, TablaSimbolos t)
{
	this.nombreArchivo=nombreArchivo;
	this.ts=t;
	this.cantRetornos = 0;
	this.estructuras = "Estructuras sintacticas detectadas en el codigo fuente :  \n";
	this.lex= new AnalizadorLexico(nombreArchivo, t, this);
}

String yyerror(String a) {
	return a;
}
String errores() {
	return lex.getErrores();
}
int yylex() {
	return lex.yylex();
}

boolean matcheanTipos(){
	char firstC=yylval.sval.charAt(0);
	if ( (tipoVar.equals(AccionSemantica.DOUBLE) && (firstC =='x' || firstC =='y' || firstC =='z')) || (tipoVar.equals(AccionSemantica.ULONGINT) && (firstC == 'd')) ) {
		return false;
	}
	return true;
}

void estructurasSintacticas(String estructura){
	estructuras += estructura + "\n";
}

public static void main(String[] args) {
	String prueba= "PruebaGramaticaErrores";
	TablaSimbolos tb= new TablaSimbolos();
	Parser p = new Parser(prueba,tb);
	int valido = p.yyparse();
	System.out.println(p.lex.getListaTokens());
	System.out.println("\n" + p.estructuras);	
	System.out.println("Errores y Warnings detectados del codigo fuente :  \n" + p.errores());
	System.out.println("Contenido de la tabla de simbolos:  \n" + tb);
	if (valido == 0) {
		System.out.println("Se analizo todo el codigo fuente");
	}
	else {
		System.out.println("No se analizo completamente el codigo fuente , debido a uno o mas errores inesperados");
	}
	
}
//#line 884 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 9 "gramatica.y"
{estructurasSintacticas("Se declaró el programa: " + val_peek(3).sval);}
break;
case 2:
//#line 11 "gramatica.y"
{ lex.addErrorSintactico("Falta nombre en prog");}
break;
case 3:
//#line 12 "gramatica.y"
{ lex.addErrorSintactico("Falta Begin en prog");}
break;
case 4:
//#line 13 "gramatica.y"
{ lex.addErrorSintactico("Falta End en prog");}
break;
case 5:
//#line 14 "gramatica.y"
{ lex.addErrorSintactico("Falta Cuerpo en prog");}
break;
case 6:
//#line 15 "gramatica.y"
{ lex.addErrorSintactico("Falta begin y end en el prog");}
break;
case 7:
//#line 16 "gramatica.y"
{ lex.addErrorSintactico("Falta nombre y end en prog");}
break;
case 8:
//#line 17 "gramatica.y"
{ lex.addErrorSintactico("Falta nombre y cuerpo en prog");}
break;
case 9:
//#line 18 "gramatica.y"
{ lex.addErrorSintactico("Falta Cuerpo y Begin en prog");}
break;
case 10:
//#line 19 "gramatica.y"
{ lex.addErrorSintactico("Falta Cuerpo y end en prog");}
break;
case 16:
//#line 28 "gramatica.y"
{	estructurasSintacticas("Se declaro la funcion, en linea: " + lex.getLineaInicial()); }
break;
case 17:
//#line 29 "gramatica.y"
{ lex.addErrorSintactico("Se declaro la variable, falta ;"); }
break;
case 18:
//#line 30 "gramatica.y"
{	lex.addErrorSintactico("Se declaro la funcion, falta ;"); }
break;
case 22:
//#line 36 "gramatica.y"
{estructurasSintacticas("Se imprimio un mensaje, en linea: " + lex.getLineaInicial()); }
break;
case 24:
//#line 38 "gramatica.y"
{estructurasSintacticas("Se llamo a una etiqueta goto, en linea: " + lex.getLineaInicial()); }
break;
case 25:
//#line 39 "gramatica.y"
{	estructurasSintacticas("Se declaro una etiqueta goto, en linea: " + lex.getLineaInicial()); }
break;
case 27:
//#line 43 "gramatica.y"
{lex.addErrorSintactico("falta el ( en la comparacion"); }
break;
case 28:
//#line 44 "gramatica.y"
{lex.addErrorSintactico("falta el ) en la comparacion"); }
break;
case 29:
//#line 45 "gramatica.y"
{lex.addErrorSintactico("falta el ( y el ) en la comparacion"); }
break;
case 32:
//#line 50 "gramatica.y"
{lex.addErrorSintactico("falta la primera expresion en la comparacion"); }
break;
case 33:
//#line 51 "gramatica.y"
{lex.addErrorSintactico("falta la segunda expresion en la comparacion"); }
break;
case 34:
//#line 52 "gramatica.y"
{lex.addErrorSintactico("faltan lasexpresiones en la comparacion"); }
break;
case 35:
//#line 53 "gramatica.y"
{lex.addErrorSintactico("falta el comparador"); }
break;
case 36:
//#line 54 "gramatica.y"
{lex.addErrorSintactico("falta la primera lista de elementos en la comparacion"); }
break;
case 37:
//#line 55 "gramatica.y"
{lex.addErrorSintactico("falta la segunda lista de elementos en la comparacion"); }
break;
case 38:
//#line 56 "gramatica.y"
{lex.addErrorSintactico("faltan las listas de elementos en la comparacion"); }
break;
case 41:
//#line 61 "gramatica.y"
{estructurasSintacticas("Se definió una sentencia de control sin else, en la linea: " + lex.getLineaInicial());}
break;
case 42:
//#line 62 "gramatica.y"
{estructurasSintacticas("Se definió una sentencia de control con else, en la linea: " + lex.getLineaInicial());}
break;
case 43:
//#line 64 "gramatica.y"
{lex.addErrorSintactico("falta el if en la seleccion"); }
break;
case 44:
//#line 65 "gramatica.y"
{lex.addErrorSintactico("falta el END_IF en la seleccion"); }
break;
case 45:
//#line 66 "gramatica.y"
{lex.addErrorSintactico("falta el IF y el END_IF en la seleccion"); }
break;
case 46:
//#line 67 "gramatica.y"
{lex.addErrorSintactico("falta el else en la seleccion"); }
break;
case 47:
//#line 68 "gramatica.y"
{lex.addErrorSintactico("falta el if y el else en la seleccion"); }
break;
case 48:
//#line 69 "gramatica.y"
{lex.addErrorSintactico("falta el end_if y el else en la seleccion"); }
break;
case 49:
//#line 70 "gramatica.y"
{lex.addErrorSintactico("falta el if, end_if y el else en la seleccion"); }
break;
case 62:
//#line 87 "gramatica.y"
{lex.addErrorSintactico("falta la variable que indica la posicion"); }
break;
case 63:
//#line 90 "gramatica.y"
{estructurasSintacticas("Se declararon variables en la linea: " + lex.getLineaInicial());}
break;
case 64:
//#line 93 "gramatica.y"
{      
						if (matcheanTipos()){
							ts.addClave(val_peek(0).sval);
							ts.addAtributo(val_peek(0).sval,AccionSemantica.TIPO,tipoVar);
						}
						else {
							lex.addErrorSintactico("se declaro la variable "+ val_peek(0).sval + " que difiere del tipo declarado: " + tipoVar);
						}
					}
break;
case 65:
//#line 102 "gramatica.y"
{  
			if (matcheanTipos()){
				ts.addClave(val_peek(0).sval);
				ts.addAtributo(val_peek(0).sval,AccionSemantica.TIPO,tipoVar);
		      } 
		      else {
		      	lex.addErrorSintactico("se declaro la variable "+ val_peek(0).sval + " que difiere del tipo declarado: " + tipoVar);
		      }
		}
break;
case 69:
//#line 118 "gramatica.y"
{estructurasSintacticas("Se realizó una asignación a la variable: " + val_peek(2).sval + " en la linea: " + lex.getLineaInicial());}
break;
case 70:
//#line 120 "gramatica.y"
{lex.addErrorSintactico("falta la expresion en la asignacion"); }
break;
case 71:
//#line 121 "gramatica.y"
{lex.addErrorSintactico("falta la variable en la asignacion"); }
break;
case 72:
//#line 122 "gramatica.y"
{lex.addErrorSintactico("falta la variable y la expresion en la asignacion"); }
break;
case 81:
//#line 134 "gramatica.y"
{
				if (ts.esUlongInt(val_peek(0).sval)){
					lex.addErrorSintactico("se utilizo un Ulongint negativo, son solo positivos");
				}
				else {
					ts.convertirNegativo(val_peek(0).sval);
				}
			}
break;
case 83:
//#line 144 "gramatica.y"
{
										if (this.cantRetornos > 0){
											estructurasSintacticas("Se declaró la función: " + val_peek(6).sval);
											ts.addClave(val_peek(6).sval);
											ts.addAtributo(val_peek(6).sval,AccionSemantica.TIPO,AccionSemantica.FUNCION);
											ts.addAtributo(val_peek(6).sval,AccionSemantica.TIPORETORNO,tipoVar);
										}
									}
break;
case 84:
//#line 153 "gramatica.y"
{lex.addErrorSintactico("falta el tipo de la funcion declarada"); }
break;
case 85:
//#line 154 "gramatica.y"
{lex.addErrorSintactico("falta el nombre de la funcion declarada"); }
break;
case 86:
//#line 155 "gramatica.y"
{lex.addErrorSintactico("falta el begin de la funcion declarada"); }
break;
case 87:
//#line 156 "gramatica.y"
{lex.addErrorSintactico("falta el  parametro en la funcion declarada"); }
break;
case 88:
//#line 157 "gramatica.y"
{lex.addErrorSintactico("falta el cuerpo en la funcion declarada"); }
break;
case 89:
//#line 158 "gramatica.y"
{lex.addErrorSintactico("falta el ( en la funcion declarada"); }
break;
case 90:
//#line 159 "gramatica.y"
{lex.addErrorSintactico("falta el ) en la funcion declarada"); }
break;
case 91:
//#line 160 "gramatica.y"
{lex.addErrorSintactico("falta el ( y el ) en la funcion declarada"); }
break;
case 92:
//#line 161 "gramatica.y"
{lex.addErrorSintactico("falta el ( y el cuerpo en la funcion declarada"); }
break;
case 93:
//#line 162 "gramatica.y"
{lex.addErrorSintactico("falta el ) y el cuerpo en la funcion declarada"); }
break;
case 94:
//#line 163 "gramatica.y"
{lex.addErrorSintactico("falta el ( ) y el cuerpo en la funcion declarada"); }
break;
case 95:
//#line 166 "gramatica.y"
{estructurasSintacticas("Se declaró el parámetro: " + val_peek(0).sval + " en la linea: " + lex.getLineaInicial());}
break;
case 96:
//#line 170 "gramatica.y"
{ts.addClave(yylval.sval)}
break;
case 102:
//#line 179 "gramatica.y"
{ this.cantRetornos ++;}
break;
case 103:
//#line 180 "gramatica.y"
{lex.addErrorSintactico("falta la expresion en el cuerpo en la funcion declarada"); }
break;
case 104:
//#line 181 "gramatica.y"
{lex.addErrorSintactico("falta el parentesis izquierdo en el cuerpo en la funcion declarada"); }
break;
case 105:
//#line 182 "gramatica.y"
{lex.addErrorSintactico("falta el parentesis derecho en el cuerpo en la funcion declarada"); }
break;
case 106:
//#line 183 "gramatica.y"
{lex.addErrorSintactico("falta el punto y coma en el cuerpo en la funcion declarada"); }
break;
case 107:
//#line 186 "gramatica.y"
{estructurasSintacticas("Se invocó a la función: " + val_peek(3).sval + " en la linea: " + lex.getLineaInicial());}
break;
case 108:
//#line 188 "gramatica.y"
{lex.addErrorSintactico("falta el parametro real en la invocación"); }
break;
case 112:
//#line 196 "gramatica.y"
{lex.addErrorSintactico("falta el parentesis izquierdo del mensaje del OUTF"); }
break;
case 113:
//#line 197 "gramatica.y"
{lex.addErrorSintactico("falta el parentesis derecho del mensaje del OUTF"); }
break;
case 114:
//#line 198 "gramatica.y"
{lex.addErrorSintactico("faltan ambos parentesis del mensaje del OUTF"); }
break;
case 115:
//#line 199 "gramatica.y"
{lex.addErrorSintactico("falta el parametro del OUTF"); }
break;
case 116:
//#line 200 "gramatica.y"
{lex.addErrorSintactico("falta el mensaje y los parentesis del OUTF"); }
break;
case 119:
//#line 205 "gramatica.y"
{estructurasSintacticas("Se declaró un bucle FOR en la linea: " + lex.getLineaInicial());}
break;
case 120:
//#line 207 "gramatica.y"
{lex.addErrorSintactico("falta el parentesis izquierdo del FOR"); }
break;
case 121:
//#line 208 "gramatica.y"
{lex.addErrorSintactico("falta el parentesis derecho del FOR"); }
break;
case 122:
//#line 209 "gramatica.y"
{lex.addErrorSintactico("faltan ambos parentesis del FOR"); }
break;
case 123:
//#line 211 "gramatica.y"
{lex.addErrorSintactico("falta el ID del FOR"); }
break;
case 124:
//#line 212 "gramatica.y"
{lex.addErrorSintactico("falta la asignacion del FOR"); }
break;
case 125:
//#line 213 "gramatica.y"
{lex.addErrorSintactico("falta la constante a asignar del FOR"); }
break;
case 126:
//#line 214 "gramatica.y"
{lex.addErrorSintactico("falta todo ID ASIGN CTE del FOR"); }
break;
case 127:
//#line 215 "gramatica.y"
{lex.addErrorSintactico("falta la condicion del FOR"); }
break;
case 128:
//#line 216 "gramatica.y"
{lex.addErrorSintactico("falta el avance del FOR"); }
break;
case 129:
//#line 217 "gramatica.y"
{lex.addErrorSintactico("falta la constante de avance del FOR"); }
break;
case 130:
//#line 218 "gramatica.y"
{lex.addErrorSintactico("falta condicion y avance entero del FOR"); }
break;
case 131:
//#line 220 "gramatica.y"
{lex.addErrorSintactico("falta asignacion entera y condicion entera del FOR"); }
break;
case 132:
//#line 221 "gramatica.y"
{lex.addErrorSintactico("falta condicion entera y avance entero del FOR"); }
break;
case 133:
//#line 222 "gramatica.y"
{lex.addErrorSintactico("falta asignacion entera y avance entero del FOR"); }
break;
case 134:
//#line 226 "gramatica.y"
{lex.addErrorSintactico("falta el FOR"); }
break;
case 138:
//#line 235 "gramatica.y"
{System.out.println("falta la etiqueta en el GOTO")}
break;
//#line 1411 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
