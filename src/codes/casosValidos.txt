nombre
BEGIN
	ulongint a, b, c;
	ulongint i;
	outf([FOR CON SALTO EN PRIMER ITERACION]);
	outf([-------------------------------------------------]);
	FOR ( i := 1 ; (i < 10) ; UP 1 ) 
	BEGIN	
		OUTF([ en el for, pero ejecuto una sola vez porque hay GOTO]);
		GOTO PEPE@;
	END;
	OUTF([ESTO NO SE IMPRIME]);
	PEPE@;
	
	outf([-------------------------------------------------]);
	outf([for anidado dentro de un if dentro de un for]);
	outf([-------------------------------------------------]);
	ulongint j, k;
	FOR ( i := 1 ; (i < 10) ; UP 1 ) 
	BEGIN	
		OUTF([ en el for, la variable i es: ]);
		OUTF(i);
		IF( i < 5) THEN
		BEGIN
			OUTF([i es menor 5 por lo que se imprimira 3 veces j]);
			FOR ( j := 1 ; (j <= 3) ; UP 1 ) 
			BEGIN	
				OUTF([ en el for, la variable j es: ]);
				OUTF(j);
			END;
		END
		ELSE
		BEGIN
			OUTF([i es mayor o igual 5 por lo que se imprimira 3 veces k]);
			FOR ( k := 1 ; (k <= 3) ; UP 1 ) 
			BEGIN	
				OUTF([ en el for, la variable k es: ]);
				OUTF(k);
			END;
		END
		END_IF;
	END;
	
	outf([-------------------------------------------------]);

	outf([Uso de triplas]);
	TYPEDEF TRIPLE <double> tripleta;
	tripleta t1, t2, t3;
	
	OUTF([Asignacion a elemento de tripla de double]);
	OUTF([t1{3} era]);
	OUTF(t1{3});
	t1{3} := 1.23d-2;
	OUTF([t1{3} := 1.23d-2]);
	OUTF(t1{3});
	
	t2{3} := 2.0;
	outf([COMPARACION DE TRIPLAS]);
	IF (t1 - t2 < t2 + t3) THEN
	BEGIN
		OUTF( [LA COMPARACION DE TRIPLAS DIO TRUE] );
	END
	END_IF;
	outf([-------------------------------------------------]);
	
	outf([OPERACIONES DE TRIPLAS]);
	t2{2} := 10.0;
	t1{1} := t2{3 - 1} * 2.d-23;
	OUTF([MUL ACCTRIPLA t2{3 - 1} * 2.d-23 y se guarda en t1{1}]);
	OUTF(t1{1});
	t1{1} := t2{3 - 1} / 2.d-23;
	OUTF([DIV ACCTRIPLA t2{3 - 1} / 2.d-23 y se guarda en t1{1}]);
	OUTF(t1{1});
	t1{1} := t2{3 - 1} + 2.d-23;
	OUTF([SUMA ACCTRIPLA t2{3 - 1} + 2.d-23 y se guarda en t1{1}]);
	OUTF(t1{1});
	t1{1} := t2{3 - 1} - 2.d-23;
	OUTF([RESTA ACCTRIPLA t2{3 - 1} - 2.d-23]);
	OUTF(t1{1});
	
	
	t2{1} := 1.0;
	t2{2} := 2.13d-1;
	t2{3} := 51.0;
	
	OUTF([t2 tiene los elementos:]);
	OUTF(t2);
	t3 := t2 + t2;
	OUTF([t3 tiene los elementos:]);
	OUTF(t3);
	t1 := t2 + t3;
	OUTF([SUMA TRIPLA t2 + t3 y se guarda en t1]);
	OUTF(t1);
	t1 := t2 - t3;
	OUTF([RESTA TRIPLA t2 - t3 y se guarda en t1]);
	OUTF(t1);
	t1 := t2 * t3;
	OUTF([MUL TRIPLA t2 * t3 y se guarda en t1]);
	OUTF(t1);
	t1 := t2 / t3;
	OUTF([DIV TRIPLA t2 / t3 y se guarda en t1]);
	OUTF(t1);
	
	double u;
	u := 2.3;
	a := 3;
	outf([-------------------------------------------------]);
	outf([OPERACIONES DE CONSTANTES DOUBLE Y ULONGINT]);
	
	a := 2 * a;
	OUTF([MUL ULONG 2 * a]);
	OUTF(a);
	a := 7 - a;
	OUTF([RESTA ULONG 7 - a]);
	OUTF(a);
	a := 2 / a;
	OUTF([DIV ULONG 2 / a]);
	OUTF(a);
	a := 2 + a;
	OUTF([SUMA ULONG 2 + a]);
	OUTF(a);
	
	u := 2.0 * u;
	OUTF([MUL DOUBLE 2.0 * u]);
	OUTF(u);
	u := 2.0 - u;
	OUTF([RESTA DOUBLE 2.0 - u]);
	OUTF(u);
	u := 2.0 / u;
	OUTF([DIV DOUBLE 2.0 / u]);
	OUTF(u);
	u := 2.0 + u;
	OUTF([SUMA DOUBLE 2.0 + u]);
	OUTF(u);
	
	outf([-------------------------------------------------]);
	outf([PATTERN MATCHING CON TRIPLAS Y ACCESO A LAS MISMAS]);
	
	
	ulongint fun fun1 (ulongint boca)
	begin
		outf(boca);
		ret(1);
	end;
	
	ulongint fun fun2 (ulongint boca)
	begin
		ret(1);
	end;
	
	TYPEDEF TRIPLE <ulongint> tresmosqueteros;
	tresmosqueteros Athos, Porthos, Aramis;
	Athos{1}:= 1;
	Athos{2}:= 2;
	Athos{3}:= 3;
	outf([Impresion Athos:]);
	outf(Athos);
	Athos{1}:= Athos{Athos{Athos{3}}}  +Athos{1} * Athos{3};
	outf([impresion Athos deespues de Athos{1}:= Athos{Athos{Athos{3}}}  + Athos{1} * Athos{3}]);
	outf(t1);
	Porthos{fun1(fun2(5))}:= Athos{ fun1(ulongint d)};
	outf([impresion Porthos despues de Porthos{fun1(fun2(5))}:= Athos{fun1(ulongint d)}]);
	outf(t2);
	Porthos{3}:= Porthos{3};
	outf([impresion Porthos despues de Porthos{3}]);
	outf(Porthos);
	Athos{1}:= Athos{1} + 1;
	Athos := Athos + Athos * Athos;
	outf([impresion Athos despues de Athos{1}:= Athos{1} + 1 y Athos:= Athos + Athos * Athos]);
	outf(Athos);
	if( ( Athos + Athos, Athos{1} + 2, Athos) > ( Porthos + Porthos - Porthos, Aramis{1} + 1,Porthos ) )
	then
	begin
		outf([pattern lado izquierdo:]);
		outf([Primer elemento, Athos + Athos]);
		outf(Athos + Athos);
		outf([Segundo elemento, Athos{1} + 2]);
		outf(Athos{1} + 2);
		outf([Tercer elemento, Athos]);
		outf(Athos);
		outf([ > ]);
		outf([pattern lado derecho:]);
		outf([Primer elemento, Porthos + Porthos - Porthos]);
		outf(Porthos + Porthos - Porthos);
		outf([Segundo elemento, Aramis{1} + 1]);
		outf(Aramis{1} + 1);
		outf([Tercer elemento, Porthos]);
		outf(Porthos);
	end
	else
	begin
		outf([else, pattern dio false]);
	end
	end_if;
	
END