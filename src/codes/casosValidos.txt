nombre
BEGIN
	ulongint a, b, c;
	
	
	

	ulongint i;
	FOR ( i := 1 ; (i < 10) ; UP 1 ) 
	BEGIN	
		OUTF([ en el for, pero ejecuto una sola vez porque hay GOTO]);
		GOTO PEPE@;
	END;
	OUTF([ESTO NO SE IMPRIME]);
	PEPE@;
	
	ulongint j, k;
	FOR ( i := 1 ; (i < 10) ; UP 1 ) 
	BEGIN	
		OUTF([ en el for, la variable i es: ]);
		OUTF(i);
		IF( i < 5) THEN
		BEGIN
			OUTF([i es menor 5 por lo que se imprimira 3 veces j]);
			FOR ( j := 1 ; (j <= 3) ; UP 1 ) 
			BEGIN	
				OUTF([ en el for, la variable j es: ]);
				OUTF(j);
			END;
		END
		ELSE
		BEGIN
			OUTF([i es mayor o igual 5 por lo que se imprimira 3 veces k]);
			FOR ( k := 1 ; (k <= 3) ; UP 1 ) 
			BEGIN	
				OUTF([ en el for, la variable k es: ]);
				OUTF(k);
			END;
		END
		END_IF;
	END;

	TYPEDEF TRIPLE <double> tripleta;
	tripleta t1, t2, t3;
	
	OUTF([Asignacion a elemento de tripla de double]);
	OUTF([t1{3} era]);
	OUTF(t1{3});
	t1{3} := 1.23d-2;
	OUTF([t1{3} := 1.23d-2]);
	OUTF(t1{3});
	
	t2{3} := 2.0;
	IF (t1 - t2 < t2 + t3) THEN
	BEGIN
		OUTF( [LA COMPARACION DEL PATRON DIO TRUE] );
	END
	END_IF;

	t2{2} := 10.0;
	t1{1} := t2{3 - 1} * 2.d-23;
	OUTF([MUL ACCTRIPLA t2{3 - 1} * 2.d-23 y se guarda en t1{1}]);
	OUTF(t1{1});
	t1{1} := t2{3 - 1} / 2.d-23;
	OUTF([DIV ACCTRIPLA t2{3 - 1} / 2.d-23 y se guarda en t1{1}]);
	OUTF(t1{1});
	t1{1} := t2{3 - 1} + 2.d-23;
	OUTF([SUMA ACCTRIPLA t2{3 - 1} + 2.d-23 y se guarda en t1{1}]);
	OUTF(t1{1});
	t1{1} := t2{3 - 1} - 2.d-23;
	OUTF([RESTA ACCTRIPLA t2{3 - 1} - 2.d-23]);
	OUTF(t1{1});
	
	t1 := t2 + t3;
	OUTF([SUMA TRIPLA t2 + t3 y se guarda en t1]);
	OUTF(t1);
	t1 := t2 - t3;
	OUTF([RESTA TRIPLA t2 - t3 y se guarda en t1]);
	OUTF(t1);
	t1 := t2 * t3;
	OUTF([MUL TRIPLA t2 * t3 y se guarda en t1]);
	OUTF(t1);
	t1 := t2 / t3;
	OUTF([DIV TRIPLA t2 / t3 y se guarda en t1]);
	OUTF(t1);
	
	double u;
	u := 2.3;
	a := 3;
	
	a := 2 * a;
	OUTF([MUL ULONG 2 * a]);
	OUTF(a);
	a := 7 - a;
	OUTF([RESTA ULONG 7 - a]);
	OUTF(a);
	a := 2 / a;
	OUTF([DIV ULONG 2 / a]);
	OUTF(a);
	a := 2 + a;
	OUTF([SUMA ULONG 2 + a]);
	OUTF(a);
	
	u := 2.0 * u;
	OUTF([MUL DOUBLE 2.0 * u]);
	OUTF(u);
	u := 2.0 - u;
	OUTF([RESTA DOUBLE 2.0 - u]);
	OUTF(u);
	u := 2.0 / u;
	OUTF([DIV DOUBLE 2.0 / u]);
	OUTF(u);
	u := 2.0 + u;
	OUTF([SUMA DOUBLE 2.0 + u]);
	OUTF(u);
	
	TYPEDEF TRIPLE <ulongint> tripoide;
	tripoide t_1, t_2, t_3;
	t_1{1}:= 1;
	t_1{2}:= 2;
	t_1{3}:= 3;
	t_1{1}:= t_1{t_1{t_1{3}}}  +t_1{1} * t_1{3};
	t_2{2}:=1;
	if( (t_1 , t_1{1} , t_1{1} * 5 + t_1{t_1{2}}) > (t_2,  t_1{1} - 1 ,t_3{1} + t_2{1} ) )
	then
	begin
		outf([Anduvo un espectaculo]);
	end
	else
	begin
		outf([Me la mande]);
	end
	end_if;
	
END